const timeline_filter = require('timeline-filter')
const year_filter = require('year-filter')
const month_filter = require('month-filter')
const timeline_cards = require('timeline-cards/timeline-cards.js')
/******************************************************************************
  APP TIMELINE COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = app_timeline
// ----------------------------------------
function app_timeline (opts = default_opts, protocol) {
  // ----------------------------------------
  // RESOURCE POOL (can't be serialized)
  // ----------------------------------------
  const ro = new ResizeObserver(entries => {
    console.log('ResizeObserver:terminal:resize')
    // !sorting && set_scroll_top(timeline_wrapper.scrollHeight)
    const scroll_channel = state.net[state.aka.scrollbar]
    scroll_channel.send({
      head: [id, scroll_channel.send.id, scroll_channel.mid++],
      refs: { },
      type: 'handle_scroll',
    })
  })
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  status.years = []
  let sorting = true // latest to oldest
  let card_filter, prev_year
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data } = opts
  // Data preprocessing
  let cards_data = require(`../data/data.json`)['timeline']
  cards_data = cards_data.map(card => {
      const date = new Date(card.date)
      if(!status.years.includes(date.getFullYear()))
        status.years.push(date.getFullYear())
      card.date_raw = date.getTime()
      card.data = data
      return card
    }).reverse()
  status.years = status.years.filter((value) => {
    return !isNaN(value)
  })
  status.years_max = [...status.years]
  card_filter = [...cards_data]
  prev_year = new Date(cards_data[0].date_raw).getFullYear()
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const PROTOCOL = {}
  const on = {}
  const channel = use_protocol('app_timeline')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `
  <div class="main_wrapper">
    <div class="windowbar"></div>
    <div class="filter_wrapper">
      <div class="month_wrapper">
      </div>
    </div>
  </div>`
  const main_wrapper = shadow.querySelector('.main_wrapper')
  const filter_wrapper = shadow.querySelector('.filter_wrapper')
  const month_wrapper = shadow.querySelector('.month_wrapper')
  // ----------------------------------------
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { // timeline cards
    const on = {
      'update_calendar': update_calendar,
      'update_timeline_filter': update_timeline_filter
    }
    const protocol = use_protocol('timeline_cards')({ state, on })
    const opts = { data, cards_data, years: status.years }
    const element = shadowfy()(timeline_cards(opts, protocol))
    month_wrapper.append(element)

  }
  { // timeline filter
    const on = {
      'toggle_month_filter': toggle_month_filter,
      'toggle_year_filter': toggle_year_filter,
      'value': on_value,
      'set_filter': set_filter
    }
    const protocol = use_protocol('timeline_filter')({ state, on })
    const opts = {
      data, tags: [],
      latest_date: cards_data[0].date_raw
    }
    const element = shadowfy()(timeline_filter(opts, protocol))
    main_wrapper.append(element)
    function on_value (message) { set_filter(message.data) }
    async function toggle_month_filter (message) {
      month_filter_wrapper.classList.toggle('show')
    }
    async function toggle_year_filter (message) {
      year_filter_wrapper.classList.toggle('hide')
    }
  }
  var year_filter_wrapper
  { // year filter
    const on = { 'set_scroll': on_set_scroll }
    const protocol =  use_protocol('year_filter')({ state, on })
    const opts = {
      data, latest_year: Math.max(...status.years), oldest_year: Math.min(...status.years), sorting
    }
    year_filter_wrapper = shadowfy()(year_filter(opts, protocol))
    filter_wrapper.append(year_filter_wrapper)
    if(screen.width < 510){
      year_filter_wrapper.classList.add('hide')
    }

    async function on_set_scroll ({ data }) {
      const channel = state.net[state.aka.timeline_cards]
      channel.send({
        head: [id, channel.send.id, channel.mid++],
        type: 'set_scroll',
        data
      })
      update_calendar({ data: { check: false, year: data.value }})
    }
  }
  year_filter_wrapper.classList.add('year_filter_wrapper')
  var month_filter_wrapper
  { // month filter
    const on = { 'set_scroll': on_set_scroll, 'set_filter': set_filter }
    const protocol = use_protocol('month_filter')({ state, on })
    const opts = { data }
    month_filter_wrapper = shadowfy()(month_filter(opts, protocol))
    month_filter_wrapper.classList.add('month_filter_wrapper')
    month_wrapper.append(month_filter_wrapper)
    async function on_set_scroll ({ data }) {
      const channel = state.net[state.aka.timeline_cards]
      channel.send({
        head: [id, channel.send.id, channel.mid++],
        type: 'set_scroll',
        data
      })
      update_calendar({ data: { check: false, year: prev_year }})
    }
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------
  update_calendar({ data: { check: false, year: prev_year }})
  return el

  async function update_timeline_filter ({ data }) {
    let channel = state.net[state.aka.timeline_filter]
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      type: 'update_timeline_filter',
      data
    })
    channel = state.net[state.aka.year_filter]
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      type: 'update_year_filter',
      data: data.year
    })
  }
  async function set_filter (data) {
    const channel = state.net[state.aka.timeline_cards]
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      type: 'set_filter',
      data
    })
  }
  async function update_calendar ({ data, head }) {
    const { check, year } = data
    let dates = []
    if (year) card_filter.forEach(card_data => {
      if (card_data.date.includes(year)) dates.push(card_data.date)
    })
    const channel = state.net[state.aka.month_filter]
    if(prev_year !== String(year) || check){
      channel.send({
        head: [id, channel.send.id, channel.mid++],
        type: 'update_calendar',
        data: {dates, year: Number(year)}
      })
      prev_year = String(year).slice(0)
      if(status.cards){
        status.cards.forEach(status_card => {
          status_card.classList.remove('active')
        })
        status.cards = []
      }
    }
    
  }
}
function get_theme () {
  return`
    .main_wrapper {
      box-sizing: border-box;
      display: flex;
      flex-direction: column;
      container-type: inline-size;
      width: 100%;
      height: 100%;
      margin-bottom: 30px;
    }
    .main_wrapper * {
      box-sizing: border-box;
    }
    .main_wrapper .filter_wrapper {
      display: flex;
      width: 100%;
      height: 100%;
      border : 2px solid var(--ac-3);
      }
    .main_wrapper .filter_wrapper .month_wrapper {
      width: 100%;
      height: 100%;
      min-height: 500px;
      overflow: hidden;
      position: relative;
    }
    .main_wrapper .filter_wrapper > div:last-child{
      border-left: 1px solid var(--ac-3);
    }
    .main_wrapper .filter_wrapper .year_filter_wrapper{
      border-left:1px solid var(--ac-3);
      padding: 1px;
    }
    .main_wrapper .filter_wrapper .year_filter_wrapper.hide{
      display: none;
    }
    .month_filter_wrapper{
      display: none;
      z-index: 2;
      height: 0;
      top: -166px;
      position: relative;
      /*border: 1px solid var(--ac-3);*/
    }
    .month_filter_wrapper.show{
      display: block;
    }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}