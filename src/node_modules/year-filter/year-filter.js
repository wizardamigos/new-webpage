/******************************************************************************
  YEAR FILTER COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = year_filter
// ----------------------------------------
function year_filter (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  // ----------------------------------------
  let active_state = ''
  const year_buttons = {}
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { latest_year, oldest_year, visitor } = opts
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = { 
    'update_year_filter': on_active_state,
    'flip': flip
   }
  const channel = use_protocol('up')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `<div class="year_wrapper"></div>`
  const year_wrapper = shadow.querySelector('.year_wrapper')
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  for (let i = oldest_year; i <= latest_year; i++) {
    const year_button = document.createElement('span')
    year_button.classList.add('year_button')
    year_button.innerHTML = i.toString()
    year_button.onclick = toggle_active_state
    year_buttons[i.toString()] = year_button
    year_wrapper.prepend(year_button)
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------
  on_active_state({ data: latest_year })
  
  return el

  function toggle_active_state (e) {
    const selected_year = e.target.innerHTML
    if (active_state) year_buttons[active_state].classList.toggle('active')
    active_state = selected_year
    e.target.classList.toggle('active')
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      type: 'set_scroll',
      data: { value: Number(active_state), filter: 'YEAR' }
    })
  }
  function on_active_state ({ data: year_button }) {
    if (active_state) year_buttons[active_state].classList.remove('active')
    year_buttons[year_button].classList.add('active')
    active_state = year_button
  }
  function flip ({ data: sorting }) {
    const action = sorting ? 'prepend' : 'append'
    year_wrapper.innerHTML = ''
    for (let i = oldest_year; i <= latest_year; i++) {
      const year_button = document.createElement('span')
      year_button.classList.add('year_button')
      year_button.innerHTML = i.toString()
      year_button.onclick = toggle_active_state
      year_buttons[i.toString()] = year_button
      year_wrapper[action](year_button)
    }
  }
}
function get_theme () {
  return `
    .year_wrapper {
      display: flex;
      flex-direction: column;
      justify-content: flex-end;
      width: 91px;
      height: 100%;
      box-sizing: border-box;
    }
    .year_button {
      display: block;
      text-align: center;
      background-color: var(--bg_color);
      border: 1px solid var(--ac-3);
      padding: 4px 10px;
      margin-bottom: 1px;
      cursor: pointer;
    }
    .year_button.active {
      background-color: var(--ac-1);
      color: var(--primary_color);
    }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}