/******************************************************************************
  TIMELINE CARD COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = timeline_card
// ----------------------------------------
function timeline_card (opts = default_opts) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data, date, time, link, title, desc, tags} = opts
  // Assigning all the icons
  const { img_src } = data
  const {
    icon_clock,
    icon_link,
    icon_calendar,
  } = img_src
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = {}
  const channel = use_protocol('up')({ state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  el.style.height = "100%"
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `<div class="timeline_card">
    <div class="content_wrapper">
      <div class="icon_wrapper">
        <div> ${icon_calendar} ${date} </div>
        <div> ${time === '' ? '' : icon_clock } ${time} </div>
        <div> <a target="_blank" href="${link}">${icon_link}</a> </div>
      </div>
      <div class="title"> ${title} </div>
      <div class="desc"> ${desc}</div>
    </div>
  </div>`
  // ----------------------------------------
  // INIT
  // ----------------------------------------

  return el
}
function get_theme () {
  return `
    * {
      box-sizing: border-box;
    }
    .timeline_card {
      display: flex;
      flex-direction:column;
      justify-content:space-between;
      height: 100%;
      width: 100%;
      line-height: normal;
      background-color: var(--bg_color);
      color: var(--primary_color) !important;
      border: 1px solid var(--ac-3);
      container-type: inline-size;
    }
    .content_wrapper {
      padding: 20px;
    }
    .icon_wrapper {
      display: flex;
      gap: 20px;
    }
    .icon_wrapper div {
      display: flex;
      gap: 5px;
      font-size: 16px;
      align-items: center;
    }
    .icon_wrapper svg *{
      fill: var(--primary_color);
    }
    .icon_wrapper img {
      width: 20px;
      height: 20px;
    }
    .icon_wrapper div:nth-last-child(1) {
      margin-left: auto;
    }
    .title {
      margin-top: 20px;
      margin-bottom: 5px;
      font-size: 18px;
      font-weight: 700;
      line-height: 16px;
    }
    .desc {
      display: flex;
      font-size: 14px;
      line-height: 16px;
      max-height: 50px;
      overflow: hidden;
      text-overflow: ellipsis;
      word-break: break-word;
    }
    .tags_wrapper {
      display: flex;
      flex-wrap: wrap;
    }
    .tag {
      flex-grow: 1;
      min-width: max-content;
      padding: 5px 10px;
      border: 1px solid var(--ac-3);
      // line-height:0px;
      text-align: center;
    }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}