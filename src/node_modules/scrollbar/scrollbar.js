const sm_icon_button = require('buttons/sm-icon-button')
/******************************************************************************
  SCROLL COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const svgdot_datauri = `
<svg width="16px" height="16px" viewBox="8 8 8 8" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path fill="#2ACA4B" d="M12 9.5C13.3807 9.5 14.5 10.6193 14.5 12C14.5 13.3807 13.3807 14.5 12 14.5C10.6193 14.5 9.5 13.3807 9.5 12C9.5 10.6193 10.6193 9.5 12 9.5Z"></path>
</svg>
`
const default_opts = { svgdot_datauri }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = scrollbar
// ----------------------------------------
function scrollbar (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  const size = {
    content_scrollSize: null,   // Width, Height
    content_clientSize: null,  // Width, Height
    content_scrollStart: null, // Left, Top
  }
  let lastPage
  let check = true
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const {
    horizontal = false,
    data: {
      img_src: {
        icon_arrow_start = default_opts.svgdot_datauri,
        icon_arrow_end = default_opts.svgdot_datauri,
      }
    }
  } = opts
  const direction = horizontal ? 'horizontal' : 'vertical'
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = { update_size, handle_scroll }
  const up_channel= use_protocol('up')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `<div class="scrollbar_wrapper ${direction}-wrapper">
    <div class="bar_wrapper ${direction}-bar-wrapper">
      <div class="bar ${direction}-bar"></div>
    </div>
    <div class="controls ${direction}-ctrls-wrapper"></div>
  </div>`
  const scrollbar_wrapper = shadow.querySelector('.scrollbar_wrapper')
  const bar = shadow.querySelector('.bar')
  const bar_wrapper = shadow.querySelector(`.${direction}-bar-wrapper`)
  // ----------------------------------------
  const controls_wrapper = shadow.querySelector('.controls')
  const controls = controls_wrapper.attachShadow(shopts)
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { // bar
    bar.onmousedown = handle_mousedown
  }
  { // arrow start
    const on = { 'click': on_click }
    const protocol = use_protocol('arrow_start')({ state, on })
    const opts = { src: icon_arrow_start, activate: false }
    const element = shadowfy()(sm_icon_button(opts, protocol))
    controls.append(element)
    function on_click (event) {
      emit_status()
      const ratio = size.content_clientSize / size.content_scrollSize
      const data = size.content_scrollStart - 30 / ratio
      up_channel.send({
        head: [id, up_channel.send.id, up_channel.mid++],
        type: 'set_scroll',
        data
      })
    }
  }
  { // arrow end
    const on = { 'click': on_click }
    const protocol = use_protocol('arrow_end')({ state, on })
    const opts = { src: icon_arrow_end, activate: false }
    const element = shadowfy()(sm_icon_button(opts, protocol))
    controls.append(element)
    function on_click (event) {
      emit_status()
      const ratio = size.content_clientSize / size.content_scrollSize
      const data = size.content_scrollStart + 30 / ratio
      up_channel.send({
        head: [id, up_channel.send.id, up_channel.mid++],
        type: 'set_scroll',
        data
      })
    }
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------
  setTimeout(() => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          handle_scroll()
          observer.unobserve(entry.target)
        }
      })
    })
    observer.observe(scrollbar_wrapper)
  }, 2000)

  return el

  function update_size ({ data }) {
    const { sh, ch, st } = data
    size.content_clientSize = ch
    size.content_scrollSize = sh
    size.content_scrollStart = st
  }
  function handle_scroll () {
    emit_status()
    const ratio = size.content_clientSize / size.content_scrollSize
    if (ratio >= 1) el.style.cssText = 'display: none;'
    else el.style.cssText = 'display: inline;'
    const [prop1, prop2] = horizontal ? ['width', 'left'] : ['height', 'top']
    const percent1 = Math.max(ratio * 100, 10);
    if(ratio * 100 < 10)
      bar_wrapper.classList.add('shrink');
    else
      bar_wrapper.classList.remove('shrink');

    const percent2 = (size.content_scrollStart / size.content_scrollSize ) * 100
    bar.style.cssText = `${prop1}: ${percent1}%; ${prop2}: ${percent2}%;`
  }
  function emit_status () {
    up_channel.send({
      head: [id, up_channel.send.id, up_channel.mid++],
      type: 'status',
      data: null
    })
  }
  function handle_mousedown (e) {
    lastPage = horizontal ? e.pageX : e.pageY
    // @TODO:
    // => maybe refactor to use ELEMENT instead of WINDOW
    // https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
    window.onmousemove = handle_mousemove
    window.onmouseup = handle_mouseup
  }
  function handle_mouseup () {
    window.onmousemove = null
    window.onmouseup = null
  }
  function handle_mousemove (e) {
    emit_status()
    const nextPage = horizontal ? e.pageX : e.pageY
    const delta = nextPage - lastPage
    lastPage = nextPage
    const ratio = size.content_clientSize / size.content_scrollSize
    const data = size.content_scrollStart + delta / ratio
    up_channel.send({
      head: [id, up_channel.send.id, up_channel.mid++],
      type: 'set_scroll',
      data
    })
  }
}
function get_theme () {
  return `
    .horizontal-wrapper {
      height: 30px;
      width: 100%;
      flex-direction: row;
      position: relative;
    }
    .horizontal-ctrls-wrapper {
      display: flex;
    }
    .vertical-ctrls-wrapper {
      display: flex;
      flex-direction: column;
    }
    .vertical-wrapper {
      width: 30px;
      height: 100%;
      flex-direction: column;
      position: relative;
    }
    .scrollbar_wrapper {
      box-sizing: border-box;
      display: flex;
    }
    .scrollbar_wrapper .vertical-bar-wrapper {
      flex-direction: column;
      height: 88%;
    }
    .scrollbar_wrapper .vertical-bar-wrapper.shrink {
      height: 80%;
    }
    .scrollbar_wrapper .horizontal-bar-wrapper {
      width: 88%;
    }
    .scrollbar_wrapper .horizontal-bar-wrapper.shrink {
      width: 80%;
    }
    .scrollbar_wrapper .controls {
      display: flex;
      position: absolute;
      bottom: 0;
      left: 0;
    }
    .scrollbar_wrapper .bar_wrapper {
      display: flex;
    }
    .bar_wrapper .vertical-bar {
      height: 30px;
    }
    .bar_wrapper .horizontal-bar {
      width: 30px;
    }
    .bar_wrapper .bar {
      position: relative;
      background-color: var(--primary_color);
      cursor: pointer;
      transition: opacity 0.25s linear;
      box-shadow:inset 0px 0px 0px 1px var(--bg_color);
    }
    .bar_wrapper .bar:hover {
      cursor: pointer
    }
    .bar_wrapper .bar:active {
      -o-user-select: none;
      -ms-user-select: none;
      -moz-user-select: none;
      -webkit-user-select: none;
      user-select: none;
    }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}