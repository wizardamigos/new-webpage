const timeline_card = require('timeline-card')
const scrollbar = require('scrollbar')
/******************************************************************************
  APP TIMELINE COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = timeline_cards
// ----------------------------------------
function timeline_cards (opts = default_opts, protocol) {
  // ----------------------------------------
  // RESOURCE POOL (can't be serialized)
  // ----------------------------------------
  const ro = new ResizeObserver(entries => {
    console.log('ResizeObserver:terminal:resize')
    // !sorting && set_scroll_top(timeline_wrapper.scrollHeight)
    const scroll_channel = state.net[state.aka.scrollbar]
    scroll_channel.send({
      head: [id, scroll_channel.send.id, scroll_channel.mid++],
      refs: { },
      type: 'handle_scroll',
    })
  })
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  status.separators = []
  status.years = []
  status.cards = []
  let sorting = true // latest to oldest
  let card_group, card_group_rev, card_filter, fragment
  let card_index = 0
  let card_index_rev = 0
  let scroll_dir = true
  let timeline_container = []
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data, cards_data, years } = opts
  // Data preprocessing
  status.years = years
  status.years_max = [...years]
  card_filter = [...cards_data]
  const tags = new Set(cards_data.flatMap(card => card.tags))
  status.YEAR = new Date(cards_data[0].date_raw).getFullYear()
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const PROTOCOL = {}
  const on = {
    'set_scroll': set_scroll,
    'set_filter': set_filter
  }
  const up_channel = use_protocol('up')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `
    <div class="scrollbar_wrapper">
      <div class="current_separator">
      </div>
      <div class="timeline_wrapper">
      </div>
    </div>
  `
  const scrollbar_wrapper = shadow.querySelector('.scrollbar_wrapper')
  const timeline_wrapper = shadow.querySelector('.timeline_wrapper')
  const current_separator = shadow.querySelector('.current_separator')
  // ----------------------------------------
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { // timeline cards
    const on = {}
    append_cards(0, 10)
    timeline_wrapper.onscroll = onscroll
  }
  { // scrollbar
    const on = { 'set_scroll': on_set_scroll, status: onstatus }
    const protocol = use_protocol('scrollbar')({ state, on })
    opts.data.img_src.icon_arrow_start = opts.data.img_src.icon_arrow_up
    opts.data.img_src.icon_arrow_end = opts.data.img_src.icon_arrow_down
    const scroll_opts = { data }
    const element = shadowfy()(scrollbar(scroll_opts, protocol))
    scrollbar_wrapper.append(element)

    const channel = state.net[state.aka.scrollbar]
    ro.observe(timeline_wrapper)
    async function on_set_scroll (message) { set_scroll_top(message.data) }
    async function onstatus (message) {
      channel.send({
        head: [id, channel.send.id, channel.mid++],
        refs: { cause: message.head },
        type: 'update_size',
        data: {
          sh: timeline_wrapper.scrollHeight,
          ch: timeline_wrapper.clientHeight,
          st: timeline_wrapper.scrollTop
        }
      })
    }
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------
  current_separator.innerHTML = sorting ? Math.max(...status.years) : Math.min(...status.years)
  return el

  async function make_card (card_data) {
    const index = scroll_dir ? card_index : card_index_rev
    const protocol = use_protocol(`card_${index}`)({ state, on })
    const opts = card_data
    const element = shadowfy()(timeline_card(opts, protocol))          
    const year = card_data.date.slice(-4)
    let last_year
    if(scroll_dir)
      last_year = index == 0 ? undefined : card_filter[index - 1].date.slice(-4)
    else
      last_year = card_filter.length == index ? undefined : card_filter[index].date.slice(-4)

    if (last_year !== year) {
      const separator = document.createElement('div')
      separator.innerHTML = year
      separator.classList.add('separator')
      status.separators.push(separator)
      fragment.appendChild(separator)
    
      if(scroll_dir){
        card_group = document.createElement('div')
        card_group.classList.add('card_group')
        fragment.appendChild(card_group)
      }
      else{
        card_group_rev = document.createElement('div')
        card_group_rev.classList.add('card_group')
        fragment.appendChild(card_group_rev)
      }  
    }
    element.idx = index
    if(scroll_dir){
      card_group.append(element)
      card_index++
    }
    else{
      card_group_rev.prepend(element)
      card_index_rev--
    }
    timeline_container.push(element)
  }
  async function clear_timeline(){
    timeline_wrapper.innerHTML = ''
    timeline_container = []
    status.separators = []
  }
  async function append_cards(start, end){
    scroll_dir = true
    fragment = document.createDocumentFragment()
    card_filter.slice(start, end).map(make_card)
    timeline_wrapper.appendChild(fragment)
  }
  async function prepend_cards(start, end){
    scroll_dir = false
    fragment = document.createDocumentFragment()
    card_filter.slice(start, end).reverse().map(make_card)
    timeline_wrapper.prepend(fragment)
  }
  async function onscroll () {
    const timeline_top = timeline_wrapper.getBoundingClientRect().top
    const timeline_height = timeline_wrapper.scrollHeight
    const timeline_scrollTop = timeline_wrapper.scrollTop
    //Bottom or top has reached load more cards
    if(0 < card_index_rev && timeline_scrollTop < timeline_height/10){
      set_scroll_top(timeline_height/10)
      prepend_cards(card_index_rev < 10 ? 0 : card_index_rev - 10, card_index_rev)
    }
    else if(card_filter.length > card_index && timeline_height < timeline_scrollTop + 1000){
      append_cards(card_index, card_index+10)
    }
  
    const scroll_channel = state.net[state.aka.scrollbar]
    scroll_channel.send({
      head: [id, scroll_channel.send.id, scroll_channel.mid++],
      type: 'handle_scroll'
    })

    let check = true //to check if scrolling was successful using separators
    //scroll using separators as ref
    status.separators.some(separator => {
      const child_top = separator.getBoundingClientRect().top
      if (child_top && child_top >= timeline_top && child_top < timeline_top + 10) {
        const year = separator.innerHTML
        status.YEAR = year
        check = false
        return true
      }
    })
    //else scroll using cards as ref
    if (check)
      timeline_container.some(card => {
        const { idx } = card
        const child_top = card.getBoundingClientRect().top
        if (child_top && child_top >= timeline_top - 180 && child_top < timeline_top + 40) {
          const year = cards_data[idx].date.slice(-4)
          status.YEAR = year
          return true
        }
      })
    // Update the year_button
    up_channel.send({
      head: [id, up_channel.send.id, up_channel.mid++],
      type: 'update_timeline_filter',
      data: { month: status.MONTH , year: status.YEAR }
    })
    up_channel.send({
      head: [id, up_channel.send.id, up_channel.mid++],
      type: 'update_calendar',
      data: { check: false, year: status.YEAR}
    })
    current_separator.innerHTML = status.YEAR
  }
  async function set_scroll ({ data }) {
    scroll_dir = true
    //for scroll by year
    if (data.filter === 'YEAR'){
      //Remove all cards
      clear_timeline()
      //Find the first card of the year
      card_index = card_index < card_filter.length && Number(card_filter[card_index].date.slice(-5)) > data.value ? card_index : 0
      for (const card_data of card_filter.slice(card_index)){
        const temp = Number(card_data.date.slice(-5))
        if(temp <= data.value){
          card_index_rev = card_index
          break
        }
        card_index++
      }
      //Populate somecards cards around the first card
      const scroll_index = card_index < 10 ? card_index : 10
      append_cards(card_index, card_index + 10)
      //scroll to the first card
      status[data.filter] = data.value
      set_scroll_top(1)
      current_separator.innerHTML = data.value
      prepend_cards(card_index_rev - scroll_index, card_index_rev)
    }//otherwise cards are needed
    else if (data.value){
      //load the cards
      const filter_date = new Date(data.value + ' ' + status.YEAR).getTime()
      fragment = document.createDocumentFragment()
      scroll_dir = false
      for(i=card_index_rev;  i >= 0 && card_filter[i].date_raw <= filter_date; i--){
        make_card(card_filter[i])
      }
      scroll_dir = true
      for(i=card_index; i < card_filter.length && card_filter[i].date_raw >= filter_date; i++){
        make_card(card_filter[i])
      }
      timeline_wrapper.appendChild(fragment)

      //scroll to the cards
      status[data.filter] = data.value
      let check = true
      timeline_container.some(card => {
        const { idx } = card
        const card_data = cards_data[idx]
        const card_date = card_data.date_raw
        if (card_date === filter_date) {
          //remove highlight on previous cards
          if(check && status.cards){
            set_scroll_top(card.getBoundingClientRect().top - timeline_wrapper.getBoundingClientRect().top + timeline_wrapper.scrollTop)

            check = false
            status.cards.forEach(status_card => {
              status_card.classList.remove('active')
            })
            if(status.cards[0] === card){
              status.cards = []
              return true
            }
            status.cards = []
          }
          //add highlight
          if(data.filter === 'DATE'){
            card.classList.add('active')
            status.cards.push(card)
          }
        }
        else if(!check){
          return true
        }
      })
    }//otherwise it means we need to remove highlight
    else if(status.cards){
      status.cards.forEach(status_card => {
        status_card.classList.remove('active')
      })
      status.cards = []
      return
    }

  }
  async function set_scroll_top (value) {
    timeline_wrapper.scrollTop = value
  }
  async function set_filter ({ data }) {
    //Store filter value
    status[data.filter] = data.value
    card_filter = [...cards_data]
    //filter the json data
    if (status.SEARCH) card_filter = card_filter.filter((card_data) => {
      return card_data.title.toLowerCase().match(status.SEARCH.toLowerCase())
    })
    if (status.STATUS && status.STATUS !== 'ALL') card_filter = card_filter.filter((card_data) => {
      return card_data.active_state === status.STATUS && card_data
    })
    if (status.TAGS && status.TAGS !== 'ALL') {
      card_filter = card_filter.filter((card_data) => {
        return card_data.tags.includes(status.TAGS) && card_data
      })
    }
    //update timeline_cards
    card_index = card_index_rev = 0
    clear_timeline()
    append_cards(0, card_filter.length < 10 ? card_filter.length : 10)
    //Update scrollbar and calendar
    const channel = state.net[state.aka.scrollbar]
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      type: 'handle_scroll'
    })
    if (!card_filter[0]) return

    set_scroll_top(0)
    up_channel.send({
      head: [id, up_channel.send.id, up_channel.mid++],
      type: 'update_calendar',
      data: { check: true, year: status.YEAR}
    })//boolean argument indicates that this request is coming from set_filter
  }
}
function get_theme () {
  return`
  *{
    box-sizing: border-box;
  }
  .timeline_wrapper {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: 500px;
    overflow: scroll;
    gap: 20px;
    scrollbar-width: none; /* For Firefox */
  }
  .timeline_wrapper.hide {
    display: none;
  }
  .timeline_wrapper .card_group {
    width: 100%;
    display: grid;
    gap: 20px;
    grid-template-columns: 12fr;
    padding: 0 2px;
  }
  .timeline_wrapper .card_group > .active{
    outline: 4px solid var(--ac-1);
  }
  .timeline_wrapper .card_group > .hide{
    display: none;
  }
  .timeline_wrapper::-webkit-scrollbar {
    display: none;
  }
  .timeline_wrapper .separator{
    background-color: var(--ac-1);
    text-align: center;
    margin: 0 4px;
    border: 1px solid var(--ac-3);
    position: relative;
    z-index: 2;
  }
  > div:last-child{
    border-left: 1px solid var(--ac-3);
  }
  .current_separator{
    position: absolute;
    display: block;
    top: 0;
    width: calc(100% - 39px);
    background-color: var(--ac-1);
    text-align: center;
    margin: 0 4px;
    border: 1px solid var(--ac-3);
    z-index: 1;
  }
  .scrollbar_wrapper{
    display: flex;
  }
  @container(min-width: 400px) {
    .timeline_wrapper .card_group:last-child,
    .timeline_wrapper .separator:last-child{
      margin-bottom: 300px;
    }
  }
  @container(min-width: 768px) {
    .timeline_wrapper .card_group {
      grid-template-columns: repeat(2, 6fr);
    }
  }
  @container(min-width: 1200px) {
    .timeline_wrapper .card_group {
      grid-template-columns: repeat(3, 4fr);
    }
  }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}